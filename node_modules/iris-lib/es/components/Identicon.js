var _templateObject = _taggedTemplateLiteralLoose(['\n    <', '\n      onClick=', '\n      cursor=', '\n      borderRadius=', '\n      overflow="hidden"\n      userSelect="none"\n      class="identicon-container ', '">\n      ', '\n      <img width=', ' height=', ' src="', '" alt="', '"/>\n    <//>'], ['\n    <', '\n      onClick=', '\n      cursor=', '\n      borderRadius=', '\n      overflow="hidden"\n      userSelect="none"\n      class="identicon-container ', '">\n      ', '\n      <img width=', ' height=', ' src="', '" alt="', '"/>\n    <//>']),
    _templateObject2 = _taggedTemplateLiteralLoose(['<span class="tooltiptext">', '</span>'], ['<span class="tooltiptext">', '</span>']);

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import register from 'preact-custom-element';
import { Component } from 'preact';
import { html } from 'htm/preact';
import { InlineBlock } from 'jsxstyle/preact';
import util from '../util';
import Attribute from '../Attribute';

var DEFAULT_WIDTH = 80;

var Identicon = function (_Component) {
  _inherits(Identicon, _Component);

  function Identicon() {
    _classCallCheck(this, Identicon);

    var _this = _possibleConstructorReturn(this, _Component.call(this));

    _this.eventListeners = {};
    return _this;
  }

  Identicon.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.user !== this.props.user) {
      this.resetEventListeners();
      this.setState({ name: '', photo: '' });
      this.componentDidMount();
    }
  };

  Identicon.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (!this.props.user) return;
    new Attribute({ type: 'keyID', value: this.props.user }).identiconSrc({ width: this.props.width, showType: false }).then(function (identicon) {
      _this2.setState({ identicon: identicon });
    });
    util.getPublicState().user(this.props.user).get('profile').get('photo').on(function (photo) {
      if (typeof photo === 'string' && photo.indexOf('data:image') === 0) {
        _this2.setState({ photo: photo });
      }
    });
    if (this.props.showTooltip) {
      util.getPublicState().user(this.props.user).get('profile').get('name').on(function (name, a, b, e) {
        _this2.eventListeners['name'] = e;
        _this2.setState({ name: name });
      });
    }
  };

  Identicon.prototype.resetEventListeners = function resetEventListeners() {
    Object.values(this.eventListeners).forEach(function (e) {
      return e.off();
    });
    this.eventListeners = {};
  };

  Identicon.prototype.componentWillUnmount = function componentWillUnmount() {
    this.resetEventListeners();
  };

  Identicon.prototype.render = function render() {
    return html(_templateObject, InlineBlock, this.props.onClick, this.props.onClick ? 'pointer' : '', parseInt(this.props.width) || DEFAULT_WIDTH, this.props.showTooltip ? 'tooltip' : '', this.props.showTooltip && this.state.name ? html(_templateObject2, this.state.name) : '', this.props.width || DEFAULT_WIDTH, this.props.width || DEFAULT_WIDTH, this.state.photo || this.state.identicon, this.state.name || '');
  };

  return Identicon;
}(Component);

!util.isNode && register(Identicon, 'iris-identicon', ['user', 'onClick', 'width', 'showTooltip']);

export default Identicon;