var _templateObject = _taggedTemplateLiteralLoose(['\n      <input\n        type="text"\n        value=', '\n        placeholder=', '\n        class=', '\n        onInput=', '\n        disabled=', ' />\n    '], ['\n      <input\n        type="text"\n        value=', '\n        placeholder=', '\n        class=', '\n        onInput=', '\n        disabled=', ' />\n    ']),
    _templateObject2 = _taggedTemplateLiteralLoose(['\n      <', ' class=', ' ref=', ' contenteditable=', ' placeholder=', ' onInput=', '>\n        ', '\n      </', '>\n    '], ['\n      <', ' class=', ' ref=', ' contenteditable=', ' placeholder=', ' onInput=', '>\n        ', '\n      </', '>\n    ']);

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import register from 'preact-custom-element';
import { Component, createRef } from 'preact';
import { html } from 'htm/preact';
import util from '../util';
import Key from '../Key';

var TextNode = function (_Component) {
  _inherits(TextNode, _Component);

  function TextNode() {
    _classCallCheck(this, TextNode);

    var _this = _possibleConstructorReturn(this, _Component.call(this));

    _this.ref = createRef();
    _this.eventListeners = {};
    _this.state = { value: '' };
    return _this;
  }

  TextNode.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.user !== this.props.user || prevProps.path !== this.props.path) {
      this.setState({ value: '' });
      this.eventListenersOff();
      this.componentDidMount();
    }
  };

  TextNode.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (!this.props.path || this.props.user === undefined) {
      return;
    }
    util.injectCss();
    this.path = this.props.path;
    this.user = this.props.user;
    this.props.user && this.path && this.getValue(this.props.user);
    var ps = util.getPublicState();
    var myPub = ps._.user && ps._.user.is.pub;
    var setMyPub = function setMyPub(myPub) {
      _this2.setState({ myPub: myPub });
      if (!_this2.props.user) {
        _this2.user = myPub;
        _this2.getValue(myPub);
      }
    };
    if (myPub) {
      setMyPub(myPub);
    } else {
      Key.getDefault().then(function (key) {
        setMyPub(key.pub);
      });
    }
  };

  TextNode.prototype.getNode = function getNode(user) {
    var base = util.getPublicState().user(user);
    var path = this.path.split('/');
    return path.reduce(function (sum, current) {
      return sum.get(decodeURIComponent(current));
    }, base);
  };

  TextNode.prototype.getValue = function getValue(user) {
    var _this3 = this;

    this.getNode(user).once();
    this.getNode(user).on(function (value, a, b, e) {
      _this3.eventListeners[_this3.path] = e;
      if (!(_this3.ref.current && _this3.ref.current === document.activeElement)) {
        _this3.setState({ value: value, class: typeof value === 'string' ? '' : 'iris-non-string' });
      }
    });
  };

  TextNode.prototype.eventListenersOff = function eventListenersOff() {
    Object.values(this.eventListeners).forEach(function (e) {
      return e.off();
    });
    this.eventListeners = {};
  };

  TextNode.prototype.componentWillUnmount = function componentWillUnmount() {
    this.eventListenersOff();
  };

  TextNode.prototype.getParsedValue = function getParsedValue(s) {
    if (this.props.json) {
      try {
        s = JSON.parse(s);
      } catch (e) {
        null;
      }
    }
    return s;
  };

  TextNode.prototype.onInput = function onInput(e) {
    var val = this.getParsedValue(e.target.value || e.target.innerText);
    this.getNode().put(val);
    this.setState({ class: typeof val === 'string' ? '' : 'iris-non-string' });
  };

  TextNode.prototype.isEditable = function isEditable() {
    return (!this.props.user || this.props.user === this.state.myPub) && String(this.props.editable) !== 'false';
  };

  TextNode.prototype.renderInput = function renderInput() {
    var _this4 = this;

    return html(_templateObject, this.state.value, this.props.placeholder || this.path, this.getClass(), function (e) {
      return _this4.onInput(e);
    }, !this.isEditable());
  };

  TextNode.prototype.renderTag = function renderTag() {
    var _this5 = this;

    var placeholder = this.props.placeholder || this.props.path;
    var tag = this.props.tag || 'span';
    return html(_templateObject2, tag, this.state.class, this.ref, this.isEditable(), placeholder, function (e) {
      return _this5.onInput(e);
    }, this.props.json ? JSON.stringify(this.state.value) : this.state.value, tag);
  };

  TextNode.prototype.render = function render() {
    return this.props.tag === 'input' ? this.renderInput() : this.renderTag();
  };

  return TextNode;
}(Component);

!util.isNode && register(TextNode, 'iris-text', ['path', 'user', 'placeholder', 'editable', 'tag']);

export default TextNode;