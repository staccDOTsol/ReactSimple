/* jshint esversion: 9 */

/*
 * Stand-alone iris node service wrapper. If NODE_ENV is 'production', uses
 * ../dist/iris.js, else uses the version in src or cjs directly. Development version
 * assumes that it is running directly under the checked-out source tree from git,
 * or in an `irisnode-dev` container, built with `docker-compose build irisnode`.
 *
 * Run with:
 *   NODE_ENV='production' yarn serve
 * or
 *   NODE_ENV='development' yarn build:run
 * or (for running tests + server)
 *   NODE_ENV='development' yarn dev
 *
 * Special environment variables:
 *   IRIS_GUN_PEERS - colon-separated peers that gun should try to connect to.
 *     Example: "http://localhost:123/gun/;http://1.2.3.4:5678/gun/"
 */

import { exists, mkdir, readFile } from 'fs';
import { promisify } from 'util';

import Gun from 'gun'; // eslint-disable-line no-unused-vars
// eslint-disable-line no-unused-vars
//require('gun/sea');

// Iris import depends on whether we're in dev mode or not
var Iris = void 0;
if (process.env.NODE_ENV === 'production') {
  console.log('Loading iris.js!');
  Iris = require('../dist/iris.js');
} else {
  console.log('Loading src as Iris!');
  Iris = require('./index.js');
}

// Explicit check for node-webcrypto-ossl, 'cause it just breaks sometimes
try {
  require('node-webcrypto-ossl');
} catch (err) {
  console.error('(^_^)> This is a passive-aggressive warning that node-webcrypto-ossl has spontaneously self-destructed, again.');
  process.exit(1);
}

// Debug output?
var debug = process.env.IRIS_VERBOSE ? console.log : console.debug;

var fsExists = promisify(exists);
var fsMkdir = promisify(mkdir);
var fsReadFile = promisify(readFile);

var configDir = './.iris';
var keyFileName = 'iris.default.key';
var gunDBName = 'iris.db.radix';

var configFile = configDir + '/config.json';

/* Environment variables:
- GUN_PEERS http://localhost:6765/gun/;http://.../
- GUN_FILE iris.db.radix
*/

(async function () {
  // If config/data directory is missing, create it
  if (!(await fsExists(configDir))) {
    console.info('Config/data directory ' + configDir + ' missing. Creating it.');
    await fsMkdir(configDir);
  }

  // Load config file
  if (!(await fsExists(configFile))) {
    configFile = 'config.default.json';
    console.warn('Config file missing, using ' + configFile + ' instead.');
  }
  var config = JSON.parse((await fsReadFile(configFile)));

  // Read-in keyfile, or generate (and store) a new key pair
  var key = Iris.Key.getDefault(configDir, keyFileName);
  debug('Key!', key);

  // TODO: If executed with --gen-keys => just generate keys, save, output to stdout, exit

  // Gun specific options (defaults)
  var gunConfig = {
    peers: { 'http://localhost:8765/gun': {} },
    port: 8765,
    file: configDir + '/' + gunDBName,
    radisk: true
    //web: 'server',
    //localStorage: true,
  };

  // IRIS_GUN_PEERS format: "http://localhost:123/gun/;http://1.2.3.4:5678/gun/"
  if (process.env.IRIS_GUN_PEERS) {
    gunConfig.peers = process.env.IRIS_GUN_PEERS.split(';').reduce(function (obj, item) {
      obj[item] = '';
      return obj;
    }, {});
  }

  // Instantiate gun
  debug(gunConfig);
  var gun = new Gun(gunConfig);

  // Load default Iris index with given configuration
  config.gun = gun;
  var index = new Iris.SocialNetwork(config);
  debug('index!', index);

  //await index.create(); // Create an index, if one does not exist
  console.info('Iris is up and running!');
})().catch(function (e) {
  console.error(e);
  process.exit(1);
});