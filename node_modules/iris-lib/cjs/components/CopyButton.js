'use strict';

exports.__esModule = true;

var _templateObject = _taggedTemplateLiteralLoose(['<button class=', ' onClick=', '>', '</button>'], ['<button class=', ' onClick=', '>', '</button>']);

var _preactCustomElement = require('preact-custom-element');

var _preactCustomElement2 = _interopRequireDefault(_preactCustomElement);

var _preact = require('preact');

var _preact2 = require('htm/preact');

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CopyButton = function (_Component) {
  _inherits(CopyButton, _Component);

  function CopyButton() {
    _classCallCheck(this, CopyButton);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  CopyButton.prototype.copyToClipboard = function copyToClipboard(text) {
    if (window.clipboardData && window.clipboardData.setData) {
      // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.
      return window.clipboardData.setData('Text', text);
    } else if (document.queryCommandSupported && document.queryCommandSupported('copy')) {
      var textarea = document.createElement('textarea');
      textarea.textContent = text;
      textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.
      document.body.appendChild(textarea);
      textarea.select();
      try {
        return document.execCommand('copy'); // Security exception may be thrown by some browsers.
      } catch (ex) {
        console.warn('Copy to clipboard failed.', ex);
        return false;
      } finally {
        document.body.removeChild(textarea);
      }
    }
  };

  CopyButton.prototype.copy = function copy(e, str) {
    var _this2 = this;

    this.copyToClipboard(str);

    var tgt = e.target;
    this.originalWidth = this.originalWidth || tgt.offsetWidth + 1;
    tgt.style.width = this.originalWidth;

    this.setState({ copied: true });
    clearTimeout(this.timeout);
    this.timeout = setTimeout(function () {
      return _this2.setState({ copied: false });
    }, 2000);
  };

  CopyButton.prototype.onClick = function onClick(e) {
    var _this3 = this;

    e.preventDefault();
    var str = typeof this.props.str === 'function' ? this.props.str() : this.props.str;

    if (navigator.share && _util2.default.isMobile && !this.props['not-shareable']) {
      navigator.share({ url: str, title: this.props.title }).catch(function (err) {
        console.error('share failed', err);
        _this3.copy(e, str);
      });
    } else {
      this.copy(e, str);
    }
  };

  CopyButton.prototype.render = function render() {
    var _this4 = this;

    var text = this.state.copied ? this.props['copied-text'] || 'Copied' : this.props.text || 'Copy';
    return (0, _preact2.html)(_templateObject, this.props['inner-class'] || 'copy-button', function (e) {
      return _this4.onClick(e);
    }, text);
  };

  return CopyButton;
}(_preact.Component);

!_util2.default.isNode && (0, _preactCustomElement2.default)(CopyButton, 'iris-copy-button', ['str', 'not-shareable', 'text', 'copied-text', 'title', 'inner-class']);

exports.default = CopyButton;
module.exports = exports['default'];