export function getType(obj) {
    if (obj == null) {
        return String(obj);
    }
    return obj.constructor.name;
}
/**
 * Return the type of a vnode as a string.
 */
export function nodeType(vnode) {
    if (!vnode.type) {
        return 'null';
    }
    return typeof vnode.type === 'string' ? vnode.type : vnode.type.name;
}
export function getDisplayName(node) {
    if (node.nodeType === 'host') {
        return node.type;
    }
    else {
        const type = node.type;
        return type.displayName || type.name;
    }
}
/**
 * Call `fn` with a method on an object temporarily replaced with `methodImpl`.
 */
export function withReplacedMethod(obj, method, methodImpl, fn) {
    const hadOwnMethod = obj.hasOwnProperty(method);
    const origMethod = obj[method];
    if (typeof origMethod !== 'function') {
        throw new Error(`Expected '${method}' property to be a function`);
    }
    obj[method] = methodImpl;
    try {
        fn();
    }
    finally {
        if (hadOwnMethod) {
            obj[method] = origMethod;
        }
        else {
            delete obj[method];
        }
    }
}
export function toArray(obj) {
    return Array.isArray(obj) ? obj : [obj];
}
