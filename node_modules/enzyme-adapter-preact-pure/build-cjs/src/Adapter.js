"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnzymeAdapter = void 0;
var enzyme_1 = __importDefault(require("enzyme"));
var preact_1 = require("preact");
var MountRenderer_js_1 = __importDefault(require("./MountRenderer.js"));
var ShallowRenderer_js_1 = __importDefault(require("./ShallowRenderer.js"));
var StringRenderer_js_1 = __importDefault(require("./StringRenderer.js"));
var preact10_rst_js_1 = require("./preact10-rst.js");
var wrapWithWrappingComponent_js_1 = __importDefault(require("./wrapWithWrappingComponent.js"));
var RootFinder_js_1 = __importDefault(require("./RootFinder.js"));
exports.EnzymeAdapter = enzyme_1.default.EnzymeAdapter;
var Adapter = /** @class */ (function (_super) {
    __extends(Adapter, _super);
    function Adapter() {
        var _this = _super.call(this) || this;
        // This function is only called during shallow rendering
        _this.wrapWithWrappingComponent = function (node, 
        /**
         * Tip:
         * The use of `wrappingComponent` and `wrappingComponentProps` is discouraged.
         * Using those props complicates a potential future migration to a different testing library.
         * Instead, wrap a component like this:
         * ```
         * shallow(<Wrapper><Component/></Wrapper>).dive()
         * ```
         */
        options) {
            return {
                RootFinder: RootFinder_js_1.default,
                node: wrapWithWrappingComponent_js_1.default(_this.createElement, node, options),
            };
        };
        _this.options = {
            // Prevent Enzyme's shallow renderer from manually invoking lifecycle
            // methods after a render. This manual invocation is needed for React
            // but not for the Preact adapter because we re-use the normal rendering
            // logic.
            lifecycles: {
                componentDidUpdate: {
                    onSetState: false,
                },
            },
        };
        // Work around a bug in Enzyme where `ShallowWrapper.getElements` calls
        // the `nodeToElement` method with undefined `this`.
        _this.nodeToElement = _this.nodeToElement.bind(_this);
        return _this;
    }
    Adapter.prototype.createRenderer = function (options) {
        switch (options.mode) {
            case 'mount':
                // The `attachTo` option is only supported for DOM rendering, for
                // consistency with React, even though the Preact adapter could easily
                // support it for shallow rendering.
                return new MountRenderer_js_1.default(__assign(__assign({}, options), { container: options.attachTo }));
            case 'shallow':
                return new ShallowRenderer_js_1.default();
            case 'string':
                return new StringRenderer_js_1.default();
            default:
                throw new Error("\"" + options.mode + "\" rendering is not supported");
        }
    };
    Adapter.prototype.nodeToElement = function (node) {
        var _this = this;
        if (typeof node === 'string') {
            return node;
        }
        var childElements = node.rendered.map(function (n) { return _this.nodeToElement(n); });
        return preact_1.h.apply(void 0, __spreadArrays([node.type, node.props], childElements));
    };
    Adapter.prototype.nodeToHostNode = function (node) {
        if (typeof node === 'string') {
            // Returning `null` here causes `wrapper.text()` to return nothing for a
            // wrapper around a `Text` node. That's not intuitive perhaps, but it
            // matches the React adapters' behaviour.
            return null;
        }
        if (node.nodeType === 'host') {
            return node.instance;
        }
        else if (node.rendered.length > 0) {
            return this.nodeToHostNode(node.rendered[0]);
        }
        else {
            return null;
        }
    };
    Adapter.prototype.isValidElement = function (el) {
        if (el == null) {
            return false;
        }
        if (typeof el.type !== 'string' &&
            typeof el.type !== 'function' &&
            el.type !== null) {
            return false;
        }
        if (typeof el.props !== 'object' || el.props == null) {
            return false;
        }
        return true;
    };
    Adapter.prototype.createElement = function (type, props) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        return preact_1.h.apply(void 0, __spreadArrays([type, props], children));
    };
    Adapter.prototype.elementToNode = function (el) {
        return preact10_rst_js_1.rstNodeFromElement(el);
    };
    return Adapter;
}(exports.EnzymeAdapter));
exports.default = Adapter;
