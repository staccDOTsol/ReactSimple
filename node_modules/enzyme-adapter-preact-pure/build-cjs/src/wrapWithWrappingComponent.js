"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var RootFinder_js_1 = __importDefault(require("./RootFinder.js"));
var compat_js_1 = require("./compat.js");
var preact_1 = require("preact");
/** Based on the equivalent function in `enzyme-adapter-utils` */
function wrapWithWrappingComponent(createElement, node, options) {
    if (options === void 0) { options = {}; }
    var wrappingComponent = options.wrappingComponent, _a = options.wrappingComponentProps, wrappingComponentProps = _a === void 0 ? {} : _a;
    if (!wrappingComponent) {
        return node;
    }
    var nodeWithValidChildren = node;
    if (typeof nodeWithValidChildren.props.children === 'string') {
        // This prevents an error when `.dive()` is used:
        // `TypeError: ShallowWrapper::dive() can only be called on components`.
        // ---------------------------------------------------------------------
        // VNode before: `{ type: Widget, props: { children: 'test' }, ... }`
        // VNode after:  `{ type: Widget, props: { children: ['test'] }, ... }`
        nodeWithValidChildren = preact_1.cloneElement(nodeWithValidChildren, nodeWithValidChildren.props, compat_js_1.childElements(nodeWithValidChildren));
    }
    return createElement(wrappingComponent, wrappingComponentProps, createElement(RootFinder_js_1.default, null, nodeWithValidChildren));
}
exports.default = wrapWithWrappingComponent;
