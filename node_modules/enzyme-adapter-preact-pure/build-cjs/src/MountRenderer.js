"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = require("preact");
var test_utils_1 = require("preact/test-utils");
var compat_js_1 = require("./compat.js");
var debounce_render_hook_js_1 = require("./debounce-render-hook.js");
var event_map_js_1 = require("./event-map.js");
var preact10_internals_js_1 = require("./preact10-internals.js");
var preact10_rst_js_1 = require("./preact10-rst.js");
var util_js_1 = require("./util.js");
function constructEvent(type, init) {
    var _a;
    var meta = event_map_js_1.eventMap[type];
    var defaultInit = (_a = meta === null || meta === void 0 ? void 0 : meta.defaultInit) !== null && _a !== void 0 ? _a : {};
    return new Event(type, __assign(__assign({}, defaultInit), init));
}
var MountRenderer = /** @class */ (function () {
    function MountRenderer(options) {
        if (options === void 0) { options = {}; }
        debounce_render_hook_js_1.installHook();
        this._container = options.container || document.createElement('div');
        this._getNode = preact10_rst_js_1.getNode;
        this._options = options;
    }
    MountRenderer.prototype.render = function (el, context, callback) {
        var _this = this;
        test_utils_1.act(function () {
            if (!_this._options.wrappingComponent) {
                compat_js_1.render(el, _this._container);
                return;
            }
            // `this._options.wrappingComponent` is only available during mount-rendering,
            // even though ShallowRenderer uses an instance of MountRenderer under the hood.
            // For shallow-rendered components, we need to utilize `wrapWithWrappingComponent`.
            var wrappedComponent = preact_1.createElement(_this._options.wrappingComponent, _this._options.wrappingComponentProps || null, el);
            compat_js_1.render(wrappedComponent, _this._container);
        });
        if (callback) {
            callback();
        }
    };
    MountRenderer.prototype.unmount = function () {
        // A custom tag name is used here to work around
        // https://github.com/developit/preact/issues/1288.
        compat_js_1.render(preact_1.h('unmount-me', {}), this._container);
        this._container.innerHTML = '';
    };
    MountRenderer.prototype.getNode = function () {
        debounce_render_hook_js_1.flushRenders();
        var container = this._container;
        if (
        // If the root component rendered null then the only indicator that content
        // has been rendered will be metadata attached to the container.
        typeof preact10_internals_js_1.getLastVNodeRenderedIntoContainer(container) === 'undefined') {
            return null;
        }
        return this._getNode(this._container);
    };
    MountRenderer.prototype.simulateError = function (nodeHierarchy, rootNode, error) {
        var errNode = nodeHierarchy[0];
        var render = function () {
            // Modify the stack to match where the error is thrown. This makes
            // debugging easier.
            error.stack = new Error().stack;
            throw error;
        };
        util_js_1.withReplacedMethod(errNode.instance, 'render', render, function () {
            test_utils_1.act(function () {
                errNode.instance.forceUpdate();
            });
        });
    };
    MountRenderer.prototype.simulateEvent = function (node, eventName, args) {
        if (args === void 0) { args = {}; }
        if (node.nodeType !== 'host') {
            var name_1 = util_js_1.getDisplayName(node);
            throw new Error("Cannot simulate event on \"" + name_1 + "\" which is not a DOM element. " +
                'Find a DOM element in the output and simulate an event on that.');
        }
        // To be more faithful to a real browser, this should use the appropriate
        // constructor for the event type. This implementation is good enough for
        // many components though.
        var bubbles = args.bubbles, composed = args.composed, cancelable = args.cancelable, extra = __rest(args, ["bubbles", "composed", "cancelable"]);
        var init = {};
        if (typeof bubbles === 'boolean') {
            init.bubbles = bubbles;
        }
        if (typeof composed === 'boolean') {
            init.composed = composed;
        }
        if (typeof cancelable === 'boolean') {
            init.cancelable = cancelable;
        }
        var event = constructEvent(eventName, init);
        Object.assign(event, extra);
        test_utils_1.act(function () {
            node.instance.dispatchEvent(event);
        });
    };
    MountRenderer.prototype.batchedUpdates = function (fn) {
        fn();
    };
    MountRenderer.prototype.container = function () {
        return this._container;
    };
    MountRenderer.prototype.wrapInvoke = function (callback) {
        var result;
        test_utils_1.act(function () {
            result = callback();
        });
        return result;
    };
    MountRenderer.prototype.getWrappingComponentRenderer = function () {
        return this;
    };
    return MountRenderer;
}());
exports.default = MountRenderer;
