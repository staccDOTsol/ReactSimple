import type { AdapterOptions, MountRendererProps, RSTNode, ShallowRendererProps } from 'enzyme';
import enzyme from 'enzyme';
import type { ReactElement } from 'react';
import type { VNode } from 'preact';
import MountRenderer from './MountRenderer.js';
import ShallowRenderer from './ShallowRenderer.js';
import StringRenderer from './StringRenderer.js';
import RootFinder from './RootFinder.js';
export declare const EnzymeAdapter: typeof enzyme.EnzymeAdapter;
export default class Adapter extends EnzymeAdapter {
    constructor();
    createRenderer(options: AdapterOptions & MountRendererProps): MountRenderer | ShallowRenderer | StringRenderer;
    nodeToElement(node: RSTNode | string): ReactElement | string;
    nodeToHostNode(node: RSTNode | string): Node | null;
    isValidElement(el: any): boolean;
    createElement(type: string | Function, props: Object | null, ...children: ReactElement[]): VNode<any>;
    elementToNode(el: ReactElement): RSTNode;
    wrapWithWrappingComponent: (node: ReactElement, options?: ShallowRendererProps | undefined) => {
        RootFinder: typeof RootFinder;
        node: ReactElement<any, string | ((props: any) => ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
    };
}
