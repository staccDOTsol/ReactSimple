"use strict";
/**
 * Helper functions to enable this library to work with different versions of
 * Preact.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.childElements = exports.render = exports.componentForDOMNode = void 0;
var preact_1 = require("preact");
var preact10_internals_js_1 = require("./preact10-internals.js");
var util_js_1 = require("./util.js");
/**
 * Search a tree of Preact v10 VNodes for the one that produced a given DOM element.
 */
function findVNodeForDOM(vnode, el, filter) {
    if (preact10_internals_js_1.getDOMNode(vnode) === el && filter(vnode)) {
        return vnode;
    }
    // Test children of this vnode.
    var children = preact10_internals_js_1.getChildren(vnode);
    if (children) {
        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var child = children_1[_i];
            if (typeof child === 'string') {
                continue;
            }
            var match = findVNodeForDOM(child, el, filter);
            if (match) {
                return match;
            }
        }
    }
    return null;
}
/**
 * Find the `Component` instance that produced a given DOM node.
 */
function componentForDOMNode(el) {
    // In Preact 10 we have to search up the tree until we find the container
    // that the root vnode was rendered into, then traverse the vnode tree to
    // find the component vnode that produced the DOM element.
    var parentEl = el.parentNode;
    var rootVNode = null;
    while (parentEl && !rootVNode) {
        rootVNode = preact10_internals_js_1.getLastVNodeRenderedIntoContainer(parentEl);
        parentEl = parentEl.parentNode;
    }
    if (rootVNode) {
        var vnode = findVNodeForDOM(rootVNode, el, function (v) { return v.type !== preact_1.Fragment; });
        if (vnode) {
            return preact10_internals_js_1.getComponent(vnode);
        }
    }
    return null;
}
exports.componentForDOMNode = componentForDOMNode;
function render(el, container) {
    preact_1.render(el, container);
}
exports.render = render;
/**
 * Return the children of a VNode.
 */
function childElements(el) {
    if (typeof el.props !== 'object' || el.props == null) {
        return [];
    }
    if (typeof el.props.children !== 'undefined') {
        return util_js_1.toArray(el.props.children);
    }
    return [];
}
exports.childElements = childElements;
