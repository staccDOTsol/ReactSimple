"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserTokenAccounts = void 0;
const spl_token_1 = require("@solana/spl-token");
const truthy_1 = require("./truthy");
const utils_1 = require("../utils");
const getUserTokenAccounts = (connection, owner) => __awaiter(void 0, void 0, void 0, function* () {
    if (!owner) {
        return [];
    }
    // user accounts are updated via ws subscription
    const accounts = yield connection.getTokenAccountsByOwner(owner, {
        programId: spl_token_1.TOKEN_PROGRAM_ID,
    });
    const tokenAccounts = accounts.value
        .map((info) => (0, utils_1.TokenAccountParser)(info.pubkey, info.account))
        .filter(truthy_1.truthy)
        .filter((t) => t.info.amount.toNumber() > 0);
    return tokenAccounts;
});
exports.getUserTokenAccounts = getUserTokenAccounts;
//# sourceMappingURL=getUserTokenAccounts.js.map