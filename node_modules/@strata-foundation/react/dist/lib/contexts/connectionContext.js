"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionProvider = exports.ConnectionContext = void 0;
const react_1 = __importStar(require("react"));
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("../constants");
const hooks_1 = require("../hooks");
exports.ConnectionContext = (0, react_1.createContext)({
    endpoint: SOLANA_API_URL,
    setEndpoint: () => { },
    connection: new web3_js_1.Connection(SOLANA_API_URL, constants_1.DEFAULT_COMMITMENT),
});
const ConnectionProvider = ({ children, }) => {
    const [endpoint, setEndpoint] = (0, hooks_1.useLocalStorage)("connectionEndpoint", SOLANA_API_URL);
    const connection = (0, react_1.useMemo)(() => new web3_js_1.Connection(endpoint, constants_1.DEFAULT_COMMITMENT), [endpoint]);
    // The websocket library solana/web3.js uses closes its websocket connection when the subscription list
    // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.
    // This is a hack to prevent the list from every getting empty
    (0, react_1.useEffect)(() => {
        const id = connection.onAccountChange(web3_js_1.Keypair.generate().publicKey, () => { });
        return () => {
            connection.removeAccountChangeListener(id);
        };
    }, [connection]);
    (0, react_1.useEffect)(() => {
        const id = connection.onSlotChange(() => null);
        return () => {
            connection.removeSlotChangeListener(id);
        };
    }, [connection]);
    return (react_1.default.createElement(exports.ConnectionContext.Provider, { value: {
            endpoint,
            setEndpoint,
            connection,
        } }, children));
};
exports.ConnectionProvider = ConnectionProvider;
//# sourceMappingURL=connectionContext.js.map